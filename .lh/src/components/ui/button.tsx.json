{
    "sourceFile": "src/components/ui/button.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1731173255621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731173277943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        destructive:\n+          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n+        outline:\n+          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        secondary:\n+          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n+        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n+      },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173287240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text- font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        destructive:\n+          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n+        outline:\n+          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        secondary:\n+          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n+        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n+      },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173307428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        destructive:\n+          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n+        outline:\n+          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        secondary:\n+          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n+        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n+      },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173351160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        destructive:\n+          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n+        outline:\n+          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        secondary:\n+          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n+        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n+      },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173364190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        destructive:\n+          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n+        outline:\n+          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        secondary:\n+          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n+        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n+        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n+      },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173384054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n import { cn } from \"@/lib/utils\"\n \n const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white\",\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n   {\n     variants: {\n       variant: {\n         default:\n@@ -54,289 +54,4 @@\n )\n Button.displayName = \"Button\"\n \n export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text- font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173413277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+        \n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173419833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+      };\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173426036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+       },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173447797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173483021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab]   text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173500615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-s shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173507977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173525708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg- dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173544057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   {\n     variants: {\n       variant: {\n         default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg- dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n          },\n       size: {\n         default: \"h-9 px-4 py-2\",\n         sm: \"h-8 rounded-md px-3 text-xs\",\n@@ -46,404 +46,4 @@\n )\n Button.displayName = \"Button\"\n \n export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-s shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab]   text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-       },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-      };\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        \n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-        destructive:\n-          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n-        outline:\n-          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        secondary:\n-          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n-        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n-        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n-      },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173565876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n   {\n     variants: {\n       variant: {\n         default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n+           dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n          },\n       size: {\n         default: \"h-9 px-4 py-2\",\n         sm: \"h-8 rounded-md px-3 text-xs\",\n"
                },
                {
                    "date": 1731173571281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n+          primary dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173589297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n+          primary=\"\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173599527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n+          primary: \"text-white b\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173605453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\n+          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n+          primary: \"text-white bg-purple\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173611532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     variants: {\n       variant: {\n         default:\n           \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n-          primary: \"text-white bg-purple\",\n+          primary: \"text-white bg-black\",\n          },\n       size: {\n         default: \"h-9 px-4 py-2\",\n         sm: \"h-8 rounded-md px-3 text-xs\",\n@@ -47,204 +47,4 @@\n )\n Button.displayName = \"Button\"\n \n export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n-          primary: \"text-white b\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n-          primary=\"\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n-          primary dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n-import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n-import { cva, type VariantProps } from \"class-variance-authority\"\n-\n-import { cn } from \"@/lib/utils\"\n-\n-const buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n-  {\n-    variants: {\n-      variant: {\n-        default:\n-          \"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\n-           dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n-         },\n-      size: {\n-        default: \"h-9 px-4 py-2\",\n-        sm: \"h-8 rounded-md px-3 text-xs\",\n-        lg: \"h-10 rounded-md px-8\",\n-        icon: \"h-9 w-9\",\n-      },\n-    },\n-    defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\",\n-    },\n-  }\n-)\n-\n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n-  asChild?: boolean\n-}\n-\n-const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n-  ({ className, variant, size, asChild = false, ...props }, ref) => {\n-    const Comp = asChild ? Slot : \"button\"\n-    return (\n-      <Comp\n-        className={cn(buttonVariants({ variant, size, className }))}\n-        ref={ref}\n-        {...props}\n-      />\n-    )\n-  }\n-)\n-Button.displayName = \"Button\"\n-\n-export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173620954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+          primary: \"text-white bg-black\",\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173644348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173657105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border bor\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173665049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173678939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white bg-transpre\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173699599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white bg-transprent text-\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173705842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white bg-transprent text-gray \"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173716435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white bg-transprent text-gray hover:by\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                },
                {
                    "date": 1731173725819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     variants: {\n       variant: {\n         default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n         primary: \"text-white bg-black\",\n-        outline: \"border border-white bg-transprent text-gray hover:by-\"\n+        outline: \"border border-white bg-transprent text-gray hover:by-b\"\n          },\n       size: {\n         default: \"h-9 px-4 py-2\",\n         sm: \"h-8 rounded-md px-3 text-xs\",\n"
                },
                {
                    "date": 1731173731260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+import * as React from \"react\"\n+import { Slot } from \"@radix-ui/react-slot\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const buttonVariants = cva(\n+  \"inline-flex items-center justify-center whitespace-nowrap rounded-full text-base font-semibold ring-offset-white transition-colors\",\n+  {\n+    variants: {\n+      variant: {\n+        default:\"bg-[#9d36ab] text-white shadow hover:bg-[#9d36ab]-hover\",\n+        primary: \"text-white bg-black\",\n+        outline: \"border border-white bg-transprent text-gray hover:by-black\"\n+         },\n+      size: {\n+        default: \"h-9 px-4 py-2\",\n+        sm: \"h-8 rounded-md px-3 text-xs\",\n+        lg: \"h-10 rounded-md px-8\",\n+        icon: \"h-9 w-9\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+      size: \"default\",\n+    },\n+  }\n+)\n+\n+export interface ButtonProps\n+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n+    VariantProps<typeof buttonVariants> {\n+  asChild?: boolean\n+}\n+\n+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n+  ({ className, variant, size, asChild = false, ...props }, ref) => {\n+    const Comp = asChild ? Slot : \"button\"\n+    return (\n+      <Comp\n+        className={cn(buttonVariants({ variant, size, className }))}\n+        ref={ref}\n+        {...props}\n+      />\n+    )\n+  }\n+)\n+Button.displayName = \"Button\"\n+\n+export { Button, buttonVariants }\n"
                }
            ],
            "date": 1731173255621,
            "name": "Commit-0",
            "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90\",\n        destructive:\n          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90\",\n        outline:\n          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n        secondary:\n          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80\",\n        ghost: \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n        link: \"text-slate-900 underline-offset-4 hover:underline dark:text-slate-50\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
        }
    ]
}